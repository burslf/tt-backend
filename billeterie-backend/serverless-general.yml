org: ticketrust
app: billeterie
service: billeterie-backend
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.8
  region: us-east-1
  stage: develop
  environment: ${file(env.${opt:stage, self:provider.stage}.json)}
  profile: ticketrust
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'lambda:InvokeFunction'
            - 'lambda:UpdateFunctionConfiguration'
            - 'lambda:GetFunction'
            - 'lambda:listAliases'
            - 'lambda:listVersionsByFunction'
            - 'lambda:deleteFunction'
            - 'lambda:listLayerVersions'
            - 'lambda:GetLayerVersion'
            - 'lambda:deleteLayerVersion'
          Resource:
            - '*'
        # Allow functions to read/write objects in a bucket
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - 'sqs:*'
          Resource:
            - '*'

#  vpc:
#    securityGroupIds:
#      - ${file(env.${opt:stage, self:provider.stage}.json):SECURITY_GROUP} # develop-rds-sg
#    subnetIds:
#      - ${file(env.${opt:stage, self:provider.stage}.json):PRIVATE_SUBNET_A} # develop-private-subnet-1
#      - ${file(env.${opt:stage, self:provider.stage}.json):PRIVATE_SUBNET_B} # develop-private-subnet-1

functions:
  apiGetCreatedEvents:
      handler: project/lambdas/api/api_get_created_events.api_get_created_events
      memorySize: 128
      events:
        - http:
            path: "/created_events"
            method: get
            cors: true
            request:
              parameters:
                querystrings:
                  network_id: true
      layers:
        - ${file(env.${opt:stage, self:provider.stage}.json):LAMBDA_HANDLER_LAYER_ARN}

  activityMonitor:
    handler: project/lambdas/event_monitors/activity_monitor.activity_monitor
    timeout: 10
    memorySize: 128
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - activityMonitor
              - Arn
    layers:
      - ${file(env.${opt:stage, self:provider.stage}.json):LAMBDA_HANDLER_LAYER_ARN}

  ethEventMonitor:
    handler: project/lambdas/event_monitors/event_monitor.event_monitor
    timeout: 10
    memorySize: 128
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ethEventMonitor
              - Arn
    layers:
      - ${file(env.${opt:stage, self:provider.stage}.json):LAMBDA_HANDLER_LAYER_ARN}

plugins:
  - serverless-api-gateway-caching
package:
  patterns:
    - '!.env/**'
    - '!node_modules/**'

resources:
 Resources:
    activityMonitor:
     Type: "AWS::SQS::Queue"
     Properties:
       QueueName: "${opt:stage, self:provider.stage}_activity_monitor"
       VisibilityTimeout: 30
    ethEventMonitor:
     Type: "AWS::SQS::Queue"
     Properties:
       QueueName: "${opt:stage, self:provider.stage}_ethereum_event_monitor"
       VisibilityTimeout: 30
